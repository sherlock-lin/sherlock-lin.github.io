<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>架构 on 夏洛克-林</title>
        <link>https://sherlock-lin.github.io/categories/%E6%9E%B6%E6%9E%84/</link>
        <description>Recent content in 架构 on 夏洛克-林</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>sherlock-lin</copyright>
        <lastBuildDate>Wed, 30 Oct 2024 11:22:35 +0800</lastBuildDate><atom:link href="https://sherlock-lin.github.io/categories/%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>什么是架构</title>
        <link>https://sherlock-lin.github.io/p/%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%B6%E6%9E%84/</link>
        <pubDate>Wed, 30 Oct 2024 11:22:35 +0800</pubDate>
        
        <guid>https://sherlock-lin.github.io/p/%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%B6%E6%9E%84/</guid>
        <description>&lt;img src="https://sherlock-lin.github.io/p/%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%B6%E6%9E%84/image-20241030110801229.png" alt="Featured image of post 什么是架构" /&gt;&lt;h2 id=&#34;架构与框架&#34;&gt;架构与框架
&lt;/h2&gt;&lt;p&gt;架构的维基百科定义如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件架构是指软件系统的“基础结构”，创造这些基础结构的准则，以及对这些结构的描述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;框架的维基百科定义如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件框架（Software framework）通常指的是为了实现某个业界标准或完成特定基本任务的软件组件规范，也指为了实现某个软件组件规范时，提供规范所要求之基础功能的软件产品。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;框架是和架构比较相似的概念，且两者有较强的关联关系，所以在实际工作中，这两个概念有时我们容易分不清楚。单纯从定义的角度来看，框架和架构的区别还是比较明显的：框架关注的是“规范”，架构关注的是“结构”。&lt;/p&gt;
&lt;p&gt;框架是一整套开发规范，架构是某一套开发规范下的具体落地方案，包括各个模块之间的组合关系以及它们协同起来完成功能的运作规则。&lt;/p&gt;
&lt;h3 id=&#34;业务逻辑分解&#34;&gt;业务逻辑分解
&lt;/h3&gt;&lt;p&gt;从业务逻辑的角度分解，“学生管理系统”的架构是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登陆注册模块&lt;/li&gt;
&lt;li&gt;个人信息模块&lt;/li&gt;
&lt;li&gt;个人成绩模块&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;物理部署分解&#34;&gt;物理部署分解
&lt;/h3&gt;&lt;p&gt;从物理部署的角度分解，“学生管理系统”的架构是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;li&gt;Web服务器&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开发规范角度分解&#34;&gt;开发规范角度分解
&lt;/h3&gt;&lt;p&gt;从开发规范的角度分解，“学生管理系统”可以采用标准的MVC框架来开发，因此架构又变成了MVC架构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Controller&lt;/li&gt;
&lt;li&gt;Model&lt;/li&gt;
&lt;li&gt;View&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统与子系统&#34;&gt;系统与子系统
&lt;/h2&gt;&lt;p&gt;系统的定义如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;系统泛指由一群有关联的个体组成，根据某种规则运作，能完成个别元件不能单独完成的工作的群体。它的意思是“总体”“整体”或“联盟”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中的关键字为&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关联：系统是由一群有关联的个体组成的，没有关联的个体堆在一起不能成为一个系统。&lt;/li&gt;
&lt;li&gt;规则：系统内的个体需要按照指定的规则运作，而不是单个个体各自为政。&lt;/li&gt;
&lt;li&gt;能力：系统能力与个体能力有本质的差别，系统能力不是个体能力之和，而是产生了新的能力。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;子系统也是由一群有关联的个体所组成的系统，多半会是更大系统中的一部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;子系统的定义和系统定义是一样的，只是观察的角度有差异，一个系统可能是另外一个更大系统的子系统。因此一个系统的架构，只包括顶层这一个层级的架构，而不包括下属子系统层级的架构。&lt;/p&gt;
&lt;h2 id=&#34;模块与组件&#34;&gt;模块与组件
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;软件模块（Module）是一套一致而互相有紧密关连的软件组织。它分别包含了程序和数据结构两部分。现代软件开发往往利用模块作为合成的单位。模块的接口表达了由该模块提供的功能和调用它时所需的元素。模块是可能分开被编写的单位。这使它们可再用和允许人员同时协作、编写及研究不同的模块。 软件组件定义为自包含的、可编程的、可重用的、与语言无关的软件单元，软件组件可以很容易被用于组装应用程序中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看到模块和组件都是系统的组成部分，只是从不同的角度拆分系统而已。从业务逻辑的角度来拆分系统后，得到的单元就是“模块”；从物理部署的角度来拆分系统后，得到的单元就是“组件”。划分模块的主要目的是职责分离；划分组件的主要目的是单元复用。&lt;/p&gt;
&lt;p&gt;如果你是业务系统的架构师，首先需要思考怎么从业务逻辑的角度把系统拆分成一个个模块角色，其次需要思考怎么从物理部署的角度把系统拆分成组件角色，例如选择MySQL作为存储系统。但是对于MySQL内部的体系架构（Parser、Optimizer、Caches&amp;amp;Buffers和Storage Engines等），你其实是可以不用关注的，也不需要在你的业务系统架构中展现这些内容。&lt;/p&gt;
&lt;h2 id=&#34;重新定义架构4r架构&#34;&gt;重新定义架构：4R架构
&lt;/h2&gt;&lt;p&gt;软件架构指软件系统的顶层（Rank）结构，它定义了系统由哪些角色（Role）组成，角色之间的关系（Relation）和运作规则（Rule）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sherlock-lin.github.io/p/%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%B6%E6%9E%84/image-20241030110801229.png&#34;
	width=&#34;787&#34;
	height=&#34;198&#34;
	srcset=&#34;https://sherlock-lin.github.io/p/%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%B6%E6%9E%84/image-20241030110801229_hu6167111019341187493.png 480w, https://sherlock-lin.github.io/p/%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%B6%E6%9E%84/image-20241030110801229_hu15467771587684573587.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241030110801229&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;397&#34;
		data-flex-basis=&#34;953px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;因为这个定义中的4个关键词，都可以用R开头的英文单词来表示，分别是Rank、Role、Relation和Rule，所以我把定义简称为“4R架构定义”，每个R的详细解释如下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;第一个R，Rank。它是指软件架构是分层的，对应“系统”和“子系统”的分层关系。通常情况下，我们只需要关注某一层的架构，最多展示相邻两层的架构，而不需要把每一层的架构全部糅杂在一起。无论是架构设计还是画架构图，都应该采取“自顶向下，逐步细化”的方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二个R，Role。它是指软件系统包含哪些角色，每个角色都会负责系统的一部分功能。架构设计最重要的工作之一就是将系统拆分为多个角色。最常见的微服务拆分其实就是将整体复杂的&lt;strong&gt;业务系统&lt;/strong&gt;按照业务领域的方式，拆分为多个微服务，每个微服务就是系统的一个角色。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三个R，Relation。它是指软件系统的角色之间的关系，对应到架构图中其实就是连接线，角色之间的关系不能乱连，任何关系最后都需要代码来实现，包括连接方式（HTTP、TCP、UDP和串口等）、数据协议（JSON、XML和二进制等）以及具体的接口等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第四个R，Rule。它是指软件系统角色之间如何协作来完成系统功能。我们在前面解读什么是“系统”的时候提到过：系统能力不是个体能力之和，而是产生了新的能力。那么这个新能力具体如何完成的呢？具体哪些角色参与了这个新能力呢？这就是Rule所要表达的内容。在架构设计的时候，核心的业务场景都需要设计Rule。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在实际工作中，为了方便理解，Rank、Role和Relation是通过系统架构图来展示的，而Rule是通过系统序列图（System Sequence Diagram）来展示的。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;架构师更关注整体，高级程序员更关注实现逻辑，因此高级程序员如果有更高的追求，或者希望所负责的软件变得更好，那么在设计程序时，应该也要站在架构师的视角俯瞰全局，因此学习并掌握架构相关的知识是很有必要的。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
